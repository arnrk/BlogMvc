// <auto-generated />
using System;
using BlogMvc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogMvc.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogMvc.Models.CategoryModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new { ID = 1, CategoryName = "Fun" },
                        new { ID = 2, CategoryName = "Food" },
                        new { ID = 3, CategoryName = "Sun" },
                        new { ID = 4, CategoryName = "Other" }
                    );
                });

            modelBuilder.Entity("BlogMvc.Models.PostModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("Body");

                    b.Property<int?>("CategoriesID");

                    b.Property<int>("CategoryID");

                    b.Property<string>("Image");

                    b.Property<int>("TagID");

                    b.Property<int?>("TagsID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("CategoriesID");

                    b.HasIndex("TagsID");

                    b.ToTable("Post");

                    b.HasData(
                        new { ID = 1, Author = "hj", Body = "Shakespeare", CategoryID = 1, Image = "/images/.jpeg", TagID = 1, Title = "William" },
                        new { ID = 2, Author = "hj", Body = "Shakespeare", CategoryID = 1, Image = "/images/.jpeg", TagID = 1, Title = "William" },
                        new { ID = 3, Author = "hj", Body = "Shakespeare", CategoryID = 1, Image = "/images/.jpeg", TagID = 1, Title = "William" },
                        new { ID = 4, Author = "hj", Body = "Shakespeare", CategoryID = 1, Image = "/images/.jpeg", TagID = 1, Title = "William" }
                    );
                });

            modelBuilder.Entity("BlogMvc.Models.TagModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagName");

                    b.HasKey("ID");

                    b.ToTable("Tag");

                    b.HasData(
                        new { ID = 1, TagName = "Food" },
                        new { ID = 2, TagName = "Sun" },
                        new { ID = 3, TagName = "Fun" },
                        new { ID = 4, TagName = "Other fun Stuff" }
                    );
                });

            modelBuilder.Entity("BlogMvc.Models.PostModel", b =>
                {
                    b.HasOne("BlogMvc.Models.CategoryModel", "Categories")
                        .WithMany("Posts")
                        .HasForeignKey("CategoriesID");

                    b.HasOne("BlogMvc.Models.TagModel", "Tags")
                        .WithMany("Posts")
                        .HasForeignKey("TagsID");
                });
#pragma warning restore 612, 618
        }
    }
}
